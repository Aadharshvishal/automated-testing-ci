name: CI - Automated Testing & Assignment 4

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_fastapi
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11, 3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r assignment_1/requirements.txt
        pip install -r assignment_2/requirements.txt
        pip install -r assignment_3/requirements.txt
        pip install -r assignment_4/requirements.txt

    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_fastapi" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-github-actions" >> $GITHUB_ENV
        echo "ALGORITHM=HS256" >> $GITHUB_ENV
        echo "ACCESS_TOKEN_EXPIRE_MINUTES=30" >> $GITHUB_ENV
        echo "ENVIRONMENT=testing" >> $GITHUB_ENV

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    - name: Run Assignment 1 tests
      run: |
        cd assignment_1
        python -m pytest test_setup.py -v

    - name: Run Assignment 2 tests
      run: |
        cd assignment_2
        python -m pytest test_assignment2.py -v

    - name: Run Assignment 3 tests
      run: |
        cd assignment_3
        python -m pytest test_assignment3.py -v

    - name: Run Assignment 4 comprehensive tests
      run: |
        cd assignment_4
        python -m pytest test_comprehensive.py -v --cov=. --cov-report=xml --cov-report=html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./assignment_4/coverage.xml
        flags: assignment4
        name: assignment4-coverage

    - name: Test API endpoints integration
      run: |
        # Start Assignment 1 server in background
        cd assignment_1 && python -m uvicorn main:app --host 0.0.0.0 --port 8001 &
        ASSIGNMENT1_PID=$!
        
        # Start Assignment 2 server in background
        cd ../assignment_2 && python -m uvicorn main:app --host 0.0.0.0 --port 8002 &
        ASSIGNMENT2_PID=$!
        
        # Start Assignment 3 server in background
        cd ../assignment_3 && python -m uvicorn main:app --host 0.0.0.0 --port 8003 &
        ASSIGNMENT3_PID=$!
        
        # Wait for servers to start
        sleep 10
        
        # Test Assignment 1
        curl -f http://localhost:8001/health || exit 1
        curl -f http://localhost:8001/ || exit 1
        
        # Test Assignment 2
        curl -f http://localhost:8002/health || exit 1
        curl -f http://localhost:8002/ || exit 1
        
        # Test Assignment 3
        curl -f http://localhost:8003/health || exit 1
        curl -f http://localhost:8003/ || exit 1
        
        # Clean up
        kill $ASSIGNMENT1_PID $ASSIGNMENT2_PID $ASSIGNMENT3_PID

    - name: Run linting checks
      run: |
        pip install flake8 black isort
        # Check Python code style
        flake8 assignment_1/ assignment_2/ assignment_3/ assignment_4/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Check import sorting
        isort assignment_1/ assignment_2/ assignment_3/ assignment_4/ --check-only --diff
        # Check code formatting
        black assignment_1/ assignment_2/ assignment_3/ assignment_4/ --check --diff

    - name: Security scan
      run: |
        pip install safety bandit
        # Check for known security vulnerabilities
        safety check -r assignment_1/requirements.txt -r assignment_2/requirements.txt -r assignment_3/requirements.txt -r assignment_4/requirements.txt
        # Check for common security issues
        bandit -r assignment_1/ assignment_2/ assignment_3/ assignment_4/ -f json -o bandit-report.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json

    - name: Performance testing
      run: |
        cd assignment_4
        python -m pytest test_comprehensive.py::test_bulk_operations_performance -v -s

    - name: Generate test report
      run: |
        cd assignment_4
        python -m pytest test_comprehensive.py --html=test_report.html --self-contained-html
        echo "Test report generated: test_report.html"

    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-artifacts
        path: |
          assignment_4/test_report.html
          assignment_4/htmlcov/
          assignment_4/coverage.xml

  build-status:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
    - name: Check test results
      run: |
        if [ "${{ needs.test.result }}" == "success" ]; then
          echo "✅ All tests passed successfully!"
          echo "BUILD_STATUS=success" >> $GITHUB_ENV
        else
          echo "❌ Tests failed!"
          echo "BUILD_STATUS=failure" >> $GITHUB_ENV
        fi

    - name: Update README with build status
      run: |
        echo "Build Status: ${{ env.BUILD_STATUS }}"
        echo "Last run: $(date)"
